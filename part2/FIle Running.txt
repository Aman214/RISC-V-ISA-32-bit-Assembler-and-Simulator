addi x5 x0 5
    jal x1,SUM   #1
    addi x3,x0,1  #2
    beq x0,x0,quit   #3
     
SUM:
	addi sp,sp,-8   #4
    sw x1,4(sp)  #5
    sw x5,0(sp)   #6
    addi x6,x0,0  #7
    bge x6,x5,return   #8
    addi x5,x5,-1   #9
    jal x1,SUM   #10
    return:
    addi x6,x5,0   #11
    lw x5,0(sp)   #12
    add x5,x5,x6  #13
    lw x1,4(sp)  #14
    addi sp,sp,8   #15
    jalr x0,0(x1)  #16
quit:



addi x5 x0 5
addi x4 x0 5
addi x3 x0 1

jal x1 SUM
beq x4 x5 exit

SUM:
add x10,x10,x3
addi x3,x3,1
bne x3,x5,SUM
jalr x0 0(x1)
exit:



addi x4 x0 1
addi x5 x0 1
beq x5 x0 ADD 
addi x10 x0 2000
addi x10 x10 2000
sw x5 0(x10)
lw x8 0(x10)
ADD:
add x5 x5 x5




addi x10, x0, 5
jal x1,fact
jal x1 EXIT

fact:
addi sp, sp, -8 # adjust stack for 2 items
sw x1, 4(sp) # save the return address
sw x10, 0(sp) #// save the argument n
addi x5, x10, -1 #// x5 = n - 1
bge x5, x0, L1 #// if (n - 1) >= 0, go to L1
addi x10, x0, 1 #// return 1

jalr x0, 0(x1) #// return to caller

L1:
addi x10, x10, -1 #// n >= 1: argument gets (n −1)
jal x1, fact #// call fact with (n −1)

addi sp, sp, 8 #// pop 2 items off stack
addi x6, x10, 0 #// return from jal: move result of fact(n -1) to x6:
lw x10, 0(sp) #// restore argument n
lw x1, 4(sp) #// restore the return address

add x10, x10, x6 #// return n * fact (n −1)
jalr x0, 0(x1) #// return to the caller

EXIT: